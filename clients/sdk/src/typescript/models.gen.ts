
// Generated by dojo-bindgen on Mon, 26 Aug 2024 23:33:54 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;



// Type definition for `pistols64::types::state::ChallengeState` enum
export type ChallengeState = { type: 'Null'; } | { type: 'InProgress'; } | { type: 'Resolved'; } | { type: 'Draw'; } | { type: 'Canceled'; };

export const ChallengeStateDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `dojo::model::layout::Layout` enum
export type Layout = { type: 'Fixed'; value: RecsType.NumberArray; } | { type: 'Struct'; value: RecsType.StringArray; } | { type: 'Tuple'; value: RecsType.StringArray; } | { type: 'Array'; value: RecsType.StringArray; } | { type: 'ByteArray'; } | { type: 'Enum'; value: RecsType.StringArray; };

export const LayoutDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `pistols64::models::challenge::Challenge` struct
export interface Challenge {
    duel_id: BigInt;
    address_a: BigInt;
    address_b: BigInt;
    duelist_name_a: BigInt;
    duelist_name_b: BigInt;
    message: BigInt;
    state: ChallengeState;
    winner: Number;
    
}
export const ChallengeDefinition = {
    duel_id: RecsType.BigInt,
    address_a: RecsType.BigInt,
    address_b: RecsType.BigInt,
    duelist_name_a: RecsType.BigInt,
    duelist_name_b: RecsType.BigInt,
    message: RecsType.BigInt,
    state: ChallengeStateDefinition,
    winner: RecsType.Number,
    
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: String[];
    pending_word: BigInt;
    pending_word_len: Number;
    
}
export const ByteArrayDefinition = {
    data: RecsType.StringArray,
    pending_word: RecsType.BigInt,
    pending_word_len: RecsType.Number,
    
};

// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
    selector: BigInt;
    layout: Layout;
    
}
export const FieldLayoutDefinition = {
    selector: RecsType.BigInt,
    layout: LayoutDefinition,
    
};


// Type definition for `pistols64::models::round::Shot` struct
export interface Shot {
    hash: Number;
    salt: Number;
    action: Number;
    chance_crit: Number;
    chance_hit: Number;
    chance_lethal: Number;
    dice_crit: Number;
    dice_hit: Number;
    damage: Number;
    block: Number;
    win: Number;
    wager: Number;
    health: Number;
    honour: Number;
    
}
export const ShotDefinition = {
    hash: RecsType.Number,
    salt: RecsType.Number,
    action: RecsType.Number,
    chance_crit: RecsType.Number,
    chance_hit: RecsType.Number,
    chance_lethal: RecsType.Number,
    dice_crit: RecsType.Number,
    dice_hit: RecsType.Number,
    damage: RecsType.Number,
    block: RecsType.Number,
    win: RecsType.Number,
    wager: RecsType.Number,
    health: RecsType.Number,
    honour: RecsType.Number,
    
};

// Type definition for `pistols64::models::round::Round` struct
export interface Round {
    duel_id: BigInt;
    round_number: Number;
    shot_a: Shot;
    shot_b: Shot;
    
}
export const RoundDefinition = {
    duel_id: RecsType.BigInt,
    round_number: RecsType.Number,
    shot_a: ShotDefinition,
    shot_b: ShotDefinition,
    
};


export function defineContractComponents(world: World) {
    return {

        // Model definition for `pistols64::models::challenge::Challenge` model
        Challenge: (() => {
            return defineComponent(
                world,
                {
                    duel_id: RecsType.BigInt,
                    address_a: RecsType.BigInt,
                    address_b: RecsType.BigInt,
                    duelist_name_a: RecsType.BigInt,
                    duelist_name_b: RecsType.BigInt,
                    message: RecsType.BigInt,
                    state: RecsType.String,
                    winner: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "pistols64",
                        name: "Challenge",
                        types: ["u128", "ContractAddress", "ContractAddress", "felt252", "felt252", "felt252", "ChallengeState", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pistols64::models::round::Round` model
        Round: (() => {
            return defineComponent(
                world,
                {
                    duel_id: RecsType.BigInt,
                    round_number: RecsType.Number,
                    shot_a: ShotDefinition,
                    shot_b: ShotDefinition,
                },
                {
                    metadata: {
                        namespace: "pistols64",
                        name: "Round",
                        types: ["u128", "u8"],
                        customTypes: ["Shot", "Shot"],
                    },
                }
            );
        })(),
    };
}
