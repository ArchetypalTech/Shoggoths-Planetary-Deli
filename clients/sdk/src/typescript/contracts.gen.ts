
// Generated by dojo-bindgen on Thu, 29 Aug 2024 22:41:11 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { Account, byteArray } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import * as models from "./models.gen";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `pistols64-actions` contract
    function actions() {
        const contract_name = "actions";

        
        // Call the `create_challenge` system with the specified Account and calldata
        const create_challenge = async (props: { account: Account, duelist_name_a: bigint, duelist_name_b: bigint, message: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "create_challenge",
                        calldata: [props.duelist_name_a,
                props.duelist_name_b,
                props.message],
                    },
                    "pistols64"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `move` system with the specified Account and calldata
        const move = async (props: { account: Account, duel_id: bigint, round_number: number, duelist_name: bigint, moves: RecsType.NumberArray }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "move",
                        calldata: [props.duel_id,
                props.round_number,
                props.duelist_name,
                ...props.moves],
                    },
                    "pistols64"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_challenge_results` system with the specified Account and calldata
        const get_challenge_results = async (props: { account: Account, duel_id: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_challenge_results",
                        calldata: [props.duel_id],
                    },
                    "pistols64"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `live_long` system with the specified Account and calldata
        const live_long = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "live_long",
                        calldata: [],
                    },
                    "pistols64"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `live_fast_die_jung` system with the specified Account and calldata
        const live_fast_die_jung = async (props: { account: Account, cmd: RecsType.StringArray }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "live_fast_die_jung",
                        calldata: [...props.cmd],
                    },
                    "pistols64"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "pistols64"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            create_challenge, move, get_challenge_results, live_long, live_fast_die_jung, world
        };
    }

    // System definitions for `pistols64-rng` contract
    function rng() {
        const contract_name = "rng";

        
        // Call the `reseed` system with the specified Account and calldata
        const reseed = async (props: { account: Account, seed: bigint, salt: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "reseed",
                        calldata: [props.seed,
                props.salt],
                    },
                    "pistols64"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "pistols64"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            reseed, world
        };
    }

    return {
        actions: actions(),
        rng: rng()
    };
}
